---
title: "Unit Test v2"
format: html
editor_options: 
  chunk_output_type: console
---

## Load library + functions

```{r}
source("./src/functions.R")

gc()
library(tidyverse)
```

## Import Dataset

```{r}
exDF <- read_csv("./Sandbox/inputCSV.csv")
exDF[2,2] <- "b66"
subjects <- as.vector(t(exDF))
```

### Find Duplicates

The following code chunks are examples of duplicate sample detection.

```{r}
#function to simplify typing same thing each time
ld <- function(){
  return(listDupes(exDF))
}

#exDF contains 1 duplicate
ld()

#multi duplicate
exDF[4,] <- "d72"
exDF[1,3] <- "b61"
ld()
```

```{r}
#reset duplicate
exDF <- read_csv("./Sandbox/inputCSV.csv")
exDF[2,2] <- "b66"
# listDupes(exDF)

View(exDF)

#0=no duplicates found
if(listDupes(exDF)==0){
  print("No duplicates found.")
}else{
  print("There are duplicated sample names.")
}
```

### Uneven samples in groups

The `actualNumSamples` function removes any NA values (unequal number of subjects per group) and outputs the true subject list.

User can then use `length()` to give an integer count.

```{r}
#add NA values
subjects_raw <- subjects %>%
  append(c(NA,"o42",NA,NA,"g60","t90"),2)

subjects_raw

#drop NA values
subjects_t <- actualNumSamples(subjects_raw)

#num actual subjects/samples
length(subjects_t)
```

## Minimum gels req (WIP)

Use the `minGels` function to determine minimum number of gels required to fit all samples + ladder per gel.

```{r}
minGels(
  numLanes = 6,
  numGroups = 4,
  perGroup = 4
)
```

## Create gels

The following 2 functions create a non-centered gel according to the following rules:

1. all members of a group must be represented â‰¥ 1
1. 2 samples from same group can't be next to each other

```{r}
gels <- gelBaseline(
  totalSamples = 16,
  perLine = 8,
  entryID = subjects
)

gels <- addCols(
  inputDF = gels,
  numLanes = 11
)

# View(gels)
```

### Center Samples on Gel

The `centerSamples` function takes a non-centered gel and attempts to center the samples (ladder is not centered and is left at first lane).

```{r}
centeredGel <- centerSamples(gels)
# View(centeredGel)
```

Each row is considered a separate gel.

## Export user template

Create user template with everything except for quant filled in.

```{r}
user_template <- finalizedDF(
  inputGel = centeredGel,
  sourceDF = exDF,
  numReps = 3
)

View(user_template)
```

## Account for NA values in input

The following code chunk tests a use-case where there are unequal amount of samples per group.

```{r}
#add NA values
exdf_na <- exDF
exdf_na[2,2] <- NA
exdf_na[4,3] <- NA

#transpose to vector
na_subjects <- as.vector(t(exdf_na))

#'create basic gel
#'  ensure samples + correct num lanes
#'left shift all rows to fill in NA gaps (won't affect groupings)
na_gels <- gelBaseline(
  totalSamples = 16,
  perLine = 8,
  entryID = na_subjects
) %>%
  addCols(
    numLanes = 11
  ) %>%
  shiftLanes()

#center gel (can't pipe from prev lines)
na_centered <- centerSamples(na_gels)

#generate user template
na_template <- finalizedDF(
  inputGel = na_centered,
  sourceDF = exdf_na,
  numReps = 2
)
```

## Re-organize to nested list

```{r}
allresults <- list()

allresults[["orig_centered"]] <- centeredGel
allresults[["orig_template"]] <- user_template

allresults[["na_centered"]] <- na_centered
allresults[["na_template"]] <- na_template

rm(centeredGel,user_template,na_centered,na_template)
```

## Manual gc

```{r}
rm(ld)
rm(gels)

#uneven samples
rm(subjects_raw,subjects_t)

#account for NA values
rm(exdf_na,na_gels)
```
